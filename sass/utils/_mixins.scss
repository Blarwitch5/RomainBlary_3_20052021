/**
 *
 * MIXINS
 *
 * ========================================================================= */
@mixin padding-h-10 {
  padding-left: 10%;
  padding-right: 10%;
}
@mixin padding-v-10 {
  padding-top: 10%;
  padding-bottom: 10%;
}
@mixin padding-v-5 {
  padding-top: 5%;
  padding-bottom: 5%;
}
@mixin padding-vh-10 {
  padding: 10%;
}
@mixin margin-v-5 {
  margin-top: 5%;
  margin-bottom: 5%;
}

@mixin txt-shrikhand {
  font-family: "Shrikhand";
  font-style: normal;
  font-weight: 400;
}

@mixin box-shadow {
  box-shadow: 0px 5px 11px -6px rgba(0, 0, 0, 0.5);
  -webkit-box-shadow: 0px 5px 11px -6px rgba(0, 0, 0, 0.5);
  -moz-box-shadow: 0px 5px 11px -6px rgba(0, 0, 0, 0.5);
}

/*------ Breakpoints -----*/
@mixin breakpoint($breakpoint) {
  @if $breakpoint == xl_desktop {
    // > 1400 px
    @media (min-width: 87.5rem) {
      @content;
    }
  } @else if $breakpoint == l_desktop {
    // > 1200 px
    @media (min-width: 75rem) {
      @content;
    }
  } @else if $breakpoint == laptop {
    // > 992 px
    @media (min-width: 62rem) {
      @content;
    }
  } @else if $breakpoint == tablet {
    // > 768 px
    @media (min-width: 48rem) {
      @content;
    }
  } @else if $breakpoint == phablet {
    // > 576 px
    @media (min-width: 36rem) {
      @content;
    }
  } @else if $breakpoint == mobileonly {
    // < 576 px
    @media (max-width: 36rem) {
      @content;
    }
  }
}
/*----- @include breakpoint(value){} ------*/

//---------------------------------------------------------------//
//                                                               //
//                      FLEXBOX MIXINS                           //
//                                                               //
//---------------------------------------------------------------//

// Flexbox display
@mixin flexbox {
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
}

// Inline flex display
@mixin inline-flex {
  display: -webkit-inline-box;
  display: -moz-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
}

// The 'flex' shorthand

@mixin flex($fgrow, $fshrink, $fbasis) {
  // Set a variable to be used by box-flex properties
  $fgrow-boxflex: $fgrow;

  // Box-Flex only supports a flex-grow value so lets grab the
  // first item in the list and just return that.
  @if type-of($fgrow) == "list" {
    $fgrow-boxflex: nth($fgrow, 1);
  }

  -webkit-box: $fgrow-boxflex;
  -moz-box: $fgrow-boxflex;
  -webkit-flex: $fgrow $fshrink $fbasis;
  -ms-flex: $fgrow $fshrink $fbasis;
  flex: $fgrow $fshrink $fbasis;
}

// Flex Flow Direction
@mixin flex-direction($direction) {
  @if $direction == row-reverse {
    -webkit-box-direction: reverse;
    -webkit-box-orient: horizontal;
    -moz-box-direction: reverse;
    -moz-box-orient: horizontal;
  } @else if $direction == column {
    -webkit-box-direction: normal;
    -webkit-box-orient: vertical;
    -moz-box-direction: normal;
    -moz-box-orient: vertical;
  } @else if $direction == column-reverse {
    -webkit-box-direction: reverse;
    -webkit-box-orient: vertical;
    -moz-box-direction: reverse;
    -moz-box-orient: vertical;
  } @else {
    -webkit-box-direction: normal;
    -webkit-box-orient: horizontal;
    -moz-box-direction: normal;
    -moz-box-orient: horizontal;
  }
  -webkit-flex-direction: $direction;
  -ms-flex-direction: $direction;
  flex-direction: $direction;
}

// Flex Line Wrapping
@mixin flex-wrap($value) {
  // No Webkit/FF Box fallback.
  -webkit-flex-wrap: $value;
  @if $value == nowrap {
    -ms-flex-wrap: none;
  } @else {
    -ms-flex-wrap: $value;
  }
  flex-wrap: $value;
}

// Flex Direction and Wrap
@mixin flex-flow(
  $values: (
    row nowrap,
  )
) {
  // No Webkit/FF Box fallback.
  -webkit-flex-flow: $values;
  -ms-flex-flow: $values;
  flex-flow: $values;
}

// Display Order
@mixin order($int) {
  -webkit-box-ordinal-group: $int + 1;
  -moz-box-ordinal-group: $int + 1;
  -webkit-order: $int;
  -ms-flex-order: $int;
  order: $int;
}

// Flex grow factor
@mixin flex-grow($int) {
  -webkit-box-flex: $int;
  -moz-box-flex: $int;
  -webkit-flex-grow: $int;
  -ms-flex: $int;
  flex-grow: $int;
}

// Flex shrink
@mixin flex-shrink($int) {
  -webkit-flex-shrink: $int;
  -moz-flex-shrink: $int;
  -ms-flex: $int;
  flex-shrink: $int;
}

// Flex basis
@mixin flex-basis($value) {
  -webkit-flex-basis: $value;
  flex-basis: $value;
}

// Axis Alignment
@mixin justify-content($value) {
  @if $value == flex-start {
    -webkit-box-pack: start;
    -moz-box-pack: start;
    -ms-flex-pack: start;
  } @else if $value == flex-end {
    -webkit-box-pack: end;
    -moz-box-pack: end;
    -ms-flex-pack: end;
  } @else if $value == space-between {
    -webkit-box-pack: justify;
    -moz-box-pack: justify;
    -ms-flex-pack: justify;
  } @else if $value == space-around {
    -ms-flex-pack: distribute;
  } @else {
    -webkit-box-pack: $value;
    -moz-box-pack: $value;
    -ms-flex-pack: $value;
  }
  -webkit-justify-content: $value;
  justify-content: $value;
}

// Packing Flex Lines
@mixin align-content($value) {
  // No Webkit Box Fallback.
  -webkit-align-content: $value;
  @if $value == flex-start {
    -ms-flex-line-pack: start;
  } @else if $value == flex-end {
    -ms-flex-line-pack: end;
  } @else {
    -ms-flex-line-pack: $value;
  }
  align-content: $value;
}

// Cross-axis Alignment
@mixin align-items($value) {
  @if $value == flex-start {
    -webkit-box-align: start;
    -moz-box-align: start;
    -ms-flex-align: start;
  } @else if $value == flex-end {
    -webkit-box-align: end;
    -moz-box-align: end;
    -ms-flex-align: end;
  } @else {
    -webkit-box-align: $value;
    -moz-box-align: $value;
    -ms-flex-align: $value;
  }
  -webkit-align-items: $value;
  align-items: $value;
}

// Cross-axis Alignment
@mixin align-self($value) {
  // No Webkit Box Fallback.
  -webkit-align-self: $value;
  @if $value == flex-start {
    -ms-flex-item-align: start;
  } @else if $value == flex-end {
    -ms-flex-item-align: end;
  } @else {
    -ms-flex-item-align: $value;
  }
  align-self: $value;
}

@mixin gradient($start-color, $end-color, $orientation) {
  background-image: -moz-linear-gradient($orientation, $start-color 0%, $end-color 66%);
  background-image: -webkit-linear-gradient($orientation, $start-color 0%, $end-color 66%);
  background-image: linear-gradient($orientation, $start-color 0%, $end-color 66%);
}

@mixin center($position) {
  position: absolute;

  @if $position == "vertical" {
    top: 50%;
    -webkit-transform: translateY(-50%);
    -ms-transform: translateY(-50%);
    transform: translateY(-50%);
  } @else if $position == "horizontal" {
    left: 50%;
    -webkit-transform: translateX(-50%);
    -ms-transform: translateX(-50%);
    transform: translate(-50%);
  } @else if $position == "both" {
    top: 50%;
    left: 50%;
    -webkit-transform: translate(-50%, -50%);
    -ms-transform: translate(-50%, -50%);
    transform: translate(-50%, -50%);
  }
}
/*----- .result {@include center(both);} -----*/
